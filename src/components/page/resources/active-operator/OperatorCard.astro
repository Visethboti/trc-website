---
import { toKhmerNumerals } from "@/lib/date-helper";

import TextElement from "@/components/TextElement";

import type { SupportedLanguage } from "@/i18n/ui";
import { getLangFromUrl } from "@/i18n/utils";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import { MapIcon, Phone } from "lucide-react";

interface Props {
  title: string;
  image: ImageMetadata;
  descriptionOne?: string;
  descriptionTwo?: string;
  descriptionThree?: string;
  descriptionFour?: string;
  descriptionFive?: string;
  phone: string;
  number: number;
  address: string;
  lang: SupportedLanguage;
}

const {
  title,
  phone,
  number,
  address,
  image,
  descriptionOne,
  descriptionTwo,
  descriptionThree,
  descriptionFour,
  descriptionFive,
} = Astro.props as Props;

const phoneNumberArray = phone.split("/");

const lang = getLangFromUrl(Astro.url.pathname);

const dateFormat = (num: number) => {
  return lang === "km" ? toKhmerNumerals(`${num}`) : num;
};
---

<div
  class="flex flex-col gap-4 rounded-lg border px-4 py-2 lg:min-h-56 lg:flex-row lg:items-center xl:min-h-48 xl:items-center"
>
  <div class="grid gap-4 sm:flex lg:w-3/5 xl:w-3/5">
    <div class="grid items-center">
      <TextElement variant="body">{dateFormat(number)}.</TextElement>
    </div>
    <figure
      class="grid flex-col items-center justify-items-center lg:w-2/5 xl:w-1/3"
    >
      <Image
        src={image}
        alt={title}
        class="size-20"
        loading="eager"
        widths={[320, 480, 640, 768, 1024]}
        sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
        quality="mid"
        format="webp"
      />
    </figure>
    <div class="grid w-full items-center xl:w-2/4">
      <TextElement variant="mediumtitle">{title}</TextElement>
    </div>
  </div>
  <div class="grid gap-4 sm:flex lg:flex-col xl:w-2/5">
    {
      descriptionOne != "NULL" ? (
        <div class="grid w-full items-center rounded-lg border p-2">
          <TextElement variant="body" className="text-center">
            {descriptionOne}
          </TextElement>
        </div>
      ) : (
        ""
      )
    }
    {
      descriptionTwo != "NULL" ? (
        <div class="grid w-full items-center rounded-lg border p-2">
          <TextElement variant="body" className="text-center ">
            {descriptionTwo}
          </TextElement>
        </div>
      ) : (
        ""
      )
    }
    {
      descriptionThree != "NULL" ? (
        <div class="grid w-full items-center rounded-lg border p-2">
          <TextElement variant="body" className="text-center ">
            {descriptionThree}
          </TextElement>
        </div>
      ) : (
        ""
      )
    }
    {
      descriptionFour != "NULL" ? (
        <div class="grid w-full items-center rounded-lg border p-2">
          <TextElement variant="body" className="text-center ">
            {descriptionFour}
          </TextElement>
        </div>
      ) : (
        ""
      )
    }
    {
      descriptionFour != "NULL" ? (
        <div class="grid w-full items-center rounded-lg border p-2">
          <TextElement variant="body" className="text-center ">
            {descriptionFive}
          </TextElement>
        </div>
      ) : (
        ""
      )
    }
  </div>

  <div class="grid items-center gap-4 sm:flex xl:w-3/5">
    <div class="flex w-full gap-2 lg:w-2/3 xl:w-3/5">
      <div class="pt-1"><MapIcon size={20} /></div>
      <div><TextElement variant="body">#{address}</TextElement></div>
    </div>
    <div class="grid sm:w-1/3 lg:w-2/4 xl:w-2/5">
      <div class="flex gap-2">
        <div class="pt-1">
          <Phone size={20} />
        </div>
        <div>
          {
            phoneNumberArray.map((phone) => (
              <TextElement variant="body">{phone}</TextElement>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</div>
